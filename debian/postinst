#!/bin/sh
# postinst script for jigasi
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package


case "$1" in
    configure)

        # we don't want to regenerate config on upgrade
        if [ -x "/etc/default/jigasi" ]; then
            . /etc/default/jigasi
            if [[ "$JIGASI_SIPUSER" && "$JIGASI_SIPPWD" && "$JIGASI_SECRET" ]]; then
                OLDCONFIG=true
            fi
        fi

        # we need JVB vars for the hostname
        . /etc/default/jitsi-videobridge

        # generate config on new install
        if [ ! "$OLDCONFIG" ]; then

            # debconf SIP account questions
            . /usr/share/debconf/confmodule
            db_get jigasi/sip-account
            JIGASI_SIPUSER="$RET"
            db_get jigasi/sip-password
            JIGASI_SIPPWD=$(echo -n $RET | base64 -)
            db_stop

            # 8-chars random secret, alternative to pwgen 8
            JIGASI_SECRET=`head -c 8 /dev/urandom | tr '\0-\377' 'a-zA-Z0-9a-zA-Z0-9a-zA-Z0-9a-zA-Z0-9@@@@####'`

            # storing default for later use by Jigasi and other packages
            echo '# Jigasi settings' > /etc/default/jigasi
            echo "JIGASI_SIPUSER=$JIGASI_SIPUSER" >> /etc/default/jigasi
            echo "JIGASI_SIPPWD=$JIGASI_SIPPWD" >> /etc/default/jigasi
            echo "JIGASI_SECRET=$JIGASI_SECRET" >> /etc/default/jigasi
        fi

        # we don't want to start the daemon as root
        if ! getent passwd jigasi > /dev/null ; then
            adduser --system --group --shell /bin/bash --disabled-password \
                --home /usr/share/jigasi jigasi
        fi

        # we create home folder only if it doesn't exist
        if [ ! -d /usr/share/jigasi ]; then
            mkdir -p /usr/share/jigasi
        fi

        # we claim the home folder of jigasi in case it is owned by someone else
        OWNER=$(stat -c '%U' /usr/share/jigasi)
        GROUP=$(stat -c '%G' /usr/share/jigasi)
        if ! dpkg-statoverride --list /usr/share/jigasi/* >/dev/null && [ "$OWNER:$GROUP" != "jigasi:jigasi" ]; then
            chown -R jigasi:jigasi /usr/share/jigasi
            OWNER=jigasi
            GROUP=jigasi
        fi

        # populate the config with debconf values
        sed -i "s/<<JIGASI_SIPUSER>>/$JIGASI_SIPUSER/g" /usr/share/jigasi/jigasi-home/sip-communicator.properties
        sed -i "s/<<JIGASI_SIPPWD>>/$JIGASI_SIPPWD/g" /usr/share/jigasi/jigasi-home/sip-communicator.properties

        # update prosody config
        JIGASI_PROSODY="\nComponent \"callcontrol.$JVB_HOSTNAME\"\n    component_secret = \"$JIGASI_SECRET\"\n"
        echo $JIGASI_PROSODY >> /etc/prosody/prosody.cfg.lua
        invoke-rc.d prosody restart

        # update jitsi-meet config
        if [ ! "$(grep "call_control: 'callcontrol.$JVB_HOSTNAME'" /usr/share/jitsi-meet/config.js)" ]; then
            JIGASI_MEET="call_control: 'callcontrol.$JVB_HOSTNAME',"
            sed -i "s/hosts:\ {/hosts:\ {\n\t$JIGASI_MEET/g" /usr/share/jitsi-meet/config.js
        fi

        # ensure jigasi is not running - it will be started at the end
        if [ "$(ps -C jigasi.sh --no-headers -o pid)" ]; then
            invoke-rc.d jigasi stop || true
        fi
        if [ -x "/etc/init.d/jigasi" ]; then
            update-rc.d jigasi defaults >/dev/null
        fi

    ;;

    abort-upgrade|abort-remove|abort-deconfigure)
    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
